// Generated by gencpp from file vision/SetTrackingColours.msg
// DO NOT EDIT!


#ifndef VISION_MESSAGE_SETTRACKINGCOLOURS_H
#define VISION_MESSAGE_SETTRACKINGCOLOURS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vision
{
template <class ContainerAllocator>
struct SetTrackingColours_
{
  typedef SetTrackingColours_<ContainerAllocator> Type;

  SetTrackingColours_()
    : hue_low(0)
    , hue_high(0)
    , sat_low(0)
    , sat_high(0)
    , val_low(0)
    , val_high(0)  {
    }
  SetTrackingColours_(const ContainerAllocator& _alloc)
    : hue_low(0)
    , hue_high(0)
    , sat_low(0)
    , sat_high(0)
    , val_low(0)
    , val_high(0)  {
  (void)_alloc;
    }



   typedef uint8_t _hue_low_type;
  _hue_low_type hue_low;

   typedef uint8_t _hue_high_type;
  _hue_high_type hue_high;

   typedef uint8_t _sat_low_type;
  _sat_low_type sat_low;

   typedef uint8_t _sat_high_type;
  _sat_high_type sat_high;

   typedef uint8_t _val_low_type;
  _val_low_type val_low;

   typedef uint8_t _val_high_type;
  _val_high_type val_high;




  typedef boost::shared_ptr< ::vision::SetTrackingColours_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision::SetTrackingColours_<ContainerAllocator> const> ConstPtr;

}; // struct SetTrackingColours_

typedef ::vision::SetTrackingColours_<std::allocator<void> > SetTrackingColours;

typedef boost::shared_ptr< ::vision::SetTrackingColours > SetTrackingColoursPtr;
typedef boost::shared_ptr< ::vision::SetTrackingColours const> SetTrackingColoursConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision::SetTrackingColours_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision::SetTrackingColours_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vision

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'vision': ['/home/turtlebot6/workspace/src/vision/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vision::SetTrackingColours_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision::SetTrackingColours_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision::SetTrackingColours_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision::SetTrackingColours_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision::SetTrackingColours_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision::SetTrackingColours_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision::SetTrackingColours_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2c86efe874e740a21108c4cdc260ae8a";
  }

  static const char* value(const ::vision::SetTrackingColours_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2c86efe874e740a2ULL;
  static const uint64_t static_value2 = 0x1108c4cdc260ae8aULL;
};

template<class ContainerAllocator>
struct DataType< ::vision::SetTrackingColours_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision/SetTrackingColours";
  }

  static const char* value(const ::vision::SetTrackingColours_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision::SetTrackingColours_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 hue_low\n\
uint8 hue_high\n\
uint8 sat_low\n\
uint8 sat_high\n\
uint8 val_low\n\
uint8 val_high\n\
\n\
";
  }

  static const char* value(const ::vision::SetTrackingColours_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision::SetTrackingColours_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.hue_low);
      stream.next(m.hue_high);
      stream.next(m.sat_low);
      stream.next(m.sat_high);
      stream.next(m.val_low);
      stream.next(m.val_high);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetTrackingColours_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision::SetTrackingColours_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision::SetTrackingColours_<ContainerAllocator>& v)
  {
    s << indent << "hue_low: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hue_low);
    s << indent << "hue_high: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hue_high);
    s << indent << "sat_low: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sat_low);
    s << indent << "sat_high: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sat_high);
    s << indent << "val_low: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.val_low);
    s << indent << "val_high: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.val_high);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION_MESSAGE_SETTRACKINGCOLOURS_H
